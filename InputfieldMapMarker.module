<?php

/**
 * ProcessWire Map Marker Inputfield
 *
 * Provides the admin control panel inputs for FieldtypeMapMarker
 * 
 * For documentation about the fields used in this class, please see:  
 * /wire/core/Fieldtype.php
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2011 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class InputfieldMapMarker extends Inputfield {

	public static function getModuleInfo() {
		return array(
			'title' => 'Map Marker',
			'version' => 101
			'summary' => "Provides input for the MapMarker Fieldtype with administrative areas.",
			);
	}

	/**
	 * Just in case this Inputfield is being used separately from FieldtypeMapmarker, we include the MapMarker class
	 *
	 */
	public function __construct() {
		require_once(dirname(__FILE__) . '/MapMarker.php'); 
		parent::__construct();
	}

	/**
	 * Initialize the MapMarker Inputfield
	 *
	 * We require Google Maps API for map display, so we add it the scripts that will be loaded in PW admin
	 *
	 */
	public function init() {
		$this->config->scripts->add(($this->config->https ? 'https' : 'http') . '://maps.google.com/maps/api/js?sensor=false'); 
		return parent::init();
	}

	/**
	 * Set an attribute to this Inputfield
	 *
	 * In this case, we just capture the 'value' attribute and make sure it's something valid
 	 *
	 */
	public function setAttribute($key, $value) {

		if($key == 'value' && !$value instanceof MapMarker && !is_null($value)) {
			throw new WireException("This input only accepts a MapMarker for it's value"); 
		}

		return parent::setAttribute($key, $value); 
	}

	/**
	 * Render the markup needed to draw the Inputfield
	 *
	 */
	public function ___render() {

		$name = $this->attr('name'); 
		$id = $this->attr('id'); 
		$marker = $this->attr('value'); 
		$street = htmlentities($marker->street, ENT_QUOTES, "UTF-8"); 
		$postcode = htmlentities($marker->postcode, ENT_QUOTES, "UTF-8"); 
		$city = htmlentities($marker->city, ENT_QUOTES, "UTF-8"); 
		$areal1 = htmlentities($marker->areal1, ENT_QUOTES, "UTF-8"); 
		$areal2 = htmlentities($marker->areal2, ENT_QUOTES, "UTF-8"); 
		$areal3 = htmlentities($marker->areal3, ENT_QUOTES, "UTF-8"); 
		$apiNote = '$page->' . $name . '->';

		$out = <<< _OUT

		<p class='InputfieldMapMarkerStreet'>
			<label>
				Street<br />
				<input type='text' id='{$id}' name='_{$name}_street' value='{$street}'  /><br />
				<span class='detail'>{$apiNote}street</span>
			</label>
		</p>

		<p class='InputfieldMapMarkerPostcode'>
			<label>
				Postcode<br />
				<input type='text' id='{$id}' name='_{$name}_postcode' value='{$postcode}'  /><br />
				<span class='detail'>{$apiNote}postcode</span>
			</label>
		</p>

		<p class='InputfieldMapMarkerCity'>
			<label>
				City<br />
				<input type='text' id='{$id}' name='_{$name}_city' value='{$city}'  /><br />
				<span class='detail'>{$apiNote}city</span>
			</label>
		</p>

		<p class='InputfieldMapMarkerAreal'>
			<label>
				Administrative Level 1<br />
				<input type='text' id='{$id}' name='_{$name}_areal1' value='{$areal1}'  /><br />
				<span class='detail'>{$apiNote}areal1</span>
			</label>
		</p>

		<p class='InputfieldMapMarkerAreal'>
			<label>
				Administrative Level 2<br />
				<input type='text' id='{$id}' name='_{$name}_areal2' value='{$areal2}'  /><br />
				<span class='detail'>{$apiNote}areal2</span>
			</label>
		</p>

		<p class='InputfieldMapMarkerAreal'>
			<label>
				Administrative Level 2<br />
				<input type='text' id='{$id}' name='_{$name}_areal3' value='{$areal3}'  /><br />
				<span class='detail'>{$apiNote}areal3</span>
			</label>
		</p>

		<p class='InputfieldMapMarkerLat'>
			<label>
				Latitude<br />
				<input type='text' id='_{$id}_lat' name='_{$name}_lat' value='{$marker->lat}' />
				<span class='detail'>{$apiNote}lat</span>
			</label>
		</p>

		<p class='InputfieldMapMarkerLng'>
			<label>
				Longitude<br />
				<input type='text' id='_{$id}_lng' name='_{$name}_lng' value='{$marker->lng}' />
				<span class='detail'>{$apiNote}lng</span>
			</label>
		</p>


_OUT;

		if($marker->status > 0) $out .= "<div class='InputfieldMapMarkerMap' id='_{$id}_map' data-lat='{$marker->lat}' data-lng='{$marker->lng}'></div>";
		if(!$this->description) $this->description = "Enter a location in the Address field below and it will be geocoded to latitude/longitude when you save.";
		$this->notes = "Geocode Status: " . $marker->statusString; 

		return $out; 
	}

	/**
	 * Process the input after a form submission
	 *
	 */
	public function ___processInput(WireInputData $input) {

		$name = $this->attr('name'); 
		$marker = $this->attr('value');

		if(isset($input->$name)) {

			$marker->set('street', $input["_{$name}_street"]);
			$marker->set('postcode', $input["_{$name}_postcode"]);
			$marker->set('city', $input["_{$name}_city"]);
			$marker->set('areal1', $input["_{$name}_areal1"]);
			$marker->set('areal2', $input["_{$name}_areal2"]);
			$marker->set('areal3', $input["_{$name}_areal3"]);
			$marker->set('lat', $input["_{$name}_lat"]); 
			$marker->set('lng', $input["_{$name}_lng"]); 

			// if the address changed, then redo the geocoding.
			// while we do this in the Fieldtype, we also do it here in case this Inputfield is used on it's own.
			// the MapMarker class checks to make sure it doesn't do the same geocode twice. 
			if($marker->isChanged('street') && $marker->street) $marker->geocode();
			if($marker->isChanged('postcode') && $marker->postcode) $marker->geocode();
			if($marker->isChanged('city') && $marker->city) $marker->geocode();
		}

		return $this;
	}

}
